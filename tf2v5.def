BootStrap: docker
From: ubuntu:bionic

%help
    Container for tensorflor-gpu=2.4.2
    cudatoolkit=11.4
    cudnn=8.2.4
    tensorRT=8.2.3
    no nvidia-driver, but support 470
    ubuntu 18.04
    python 3.8

%environment
    # Set system locale, cuDNN has to be downloaded locally
    PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
    CUDA=/usr/local/cuda/lib64:/usr/local/cuda-11.4/lib64
    LD_LIBRARY_PATH=/.singularity.d/libs:$CUDA
    PYTHONPATH=modules:/usr/local/lib/python3.8/dist-packages/:/usr/bin/python3.8
    LANG=C.UTF-8 LC_ALL=C.UTF-8

%post
    # Change to tmp directory to download temporary files.
    #echo 'Dpkg::Post-Invoke {"/bin/chown -R root:root /var/lib/apt /var/cache/apt";};' > /etc/apt/apt.conf.d/singularity-chown

    cd /tmp
    # Install essential software, languages and libraries.
    #apt-get -o Acquire::GzipIndexes=false -o APT::Sandbox::User=root update
    apt-get update

    export DEBIAN_FRONTEND=noninteractive
    apt-get -qq install -y --no-install-recommends tzdata apt-utils

    ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime
    dpkg-reconfigure --frontend noninteractive  tzdata

    apt-get -qq -y update
    apt-get -qq install -y --no-install-recommends \
        autoconf \
        automake \
        build-essential \
        bzip2 \
        ca-certificates \
        cmake \
        gcc \
        g++ \
        gfortran \
        git \
        gnupg2 \
        libtool \
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        libatlas-base-dev \
        libxml2-dev \
        zlib1g-dev \
        libcairo2-dev \
        libeigen3-dev \
        libcupti-dev \
        libpcre3-dev \
        libssl-dev \
        libcurl4-openssl-dev \
        libboost-all-dev \
        libboost-dev \
        libboost-system-dev \
        libboost-thread-dev \
        libboost-serialization-dev \
        libboost-regex-dev \
        libgtk2.0-dev \
        libreadline-dev \
        libbz2-dev \
        liblzma-dev \
        libpcre++-dev \
        libpango1.0-dev \
        libmariadb-client-lgpl-dev \
        libopenblas-dev \
        liblapack-dev \
        libxt-dev \
        neovim \
        openjdk-8-jdk \
        python \
        python-pip \
        python-dev \
        python3-dev \
        python3-pip \
        python3.8 \
        python3-wheel \
        swig \
        texlive \
        texlive-fonts-extra \
        texinfo \
        vim \
        wget \
        xvfb \
        xauth \
        xfonts-base \
        zip

    export LANG=C.UTF-8 LC_ALL=C.UTF-8

    apt-get install -y --no-install-recommends zlib1g
    apt-get install -y --no-install-recommends dialog apt-utils
    apt-get update

    # install cudatoolkits 11-4 that operate in x86-64, 18.04-Ubuntu, deb (local) installer type
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin > cuda-ubuntu1804.pin
    mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600
    #wget https://developer.download.nvidia.com/compute/cuda/11.4.0/local_installers/cuda-repo-ubuntu1804-11-4-local_11.4.0-470.42.01-1_amd64.deb
    dpkg -i cuda-repo-ubuntu1804-11-4-local_11.4.0-470.42.01-1_amd64.deb
    apt-key add /var/cuda-repo-ubuntu1804-11-4-local/7fa2af80.pub
    apt-get update
    apt-get install -y --no-install-recommends cuda-11-4

    # install cudnn8.2.4 that support cuda-11-4, pkg was retrieved locally due to registration limit
    # runtime
    #dpkg -i cudnn-local-repo-ubuntu1804-8.3.2.44_1.0-1_amd64.deb
    #apt-key add /var/cudnn-local-repo-*/7fa2af80.pub
    #apt-get update

    dpkg -i libcudnn8_8.2.4.15-1+cuda11.4_amd64.deb
    dpkg -i libcudnn8-dev_8.2.4.15-1+cuda11.4_amd64.deb
    dpkg -i libcudnn8-samples_8.2.4.15-1+cuda11.4_amd64.deb
    apt-get update

    #install runtime library
    apt-get install -y libcudnn8=8.2.4.15-1+cuda11.4
    apt-get install -y libcudnn8-dev=8.2.4.15-1+cuda11.4
    apt-get install -y libcudnn8-samples=8.2.4.15-1+cuda11.4

    # Install TensorRT 8.2.3. Requires that libcudnn8 is installed above.
    # pkg was retrieved locally due to registration limit
    Os="ubuntu1804"
    Tag="cuda11.4-trt8.2.3.0-ga-20220113"
    dpkg -i nv-tensorrt-repo-${Os}-${Tag}_1-1_amd64.deb
    apt-key add /var/nv-tensorrt-repo-${Os}-${Tag}/7fa2af80.pub
    apt-get update
    apt-get install -y tensorrt

    # change pip to python 3.8
    python3.8 -m pip install pip

    # Update python pip.
    python3.8 -m pip --no-cache-dir install --upgrade pip
    python3.8 -m pip --no-cache-dir install setuptools --upgrade
    python -m pip --no-cache-dir install setuptools --upgrade

    python3.8 -m pip install --no-dependencies numpy
    apt-get install -y python3-libnvinfer-dev
    # going to use tensorRT with tensorflow
    python3 -m pip install --no-dependencies protobuf
    apt-get install -y --no-install-recommends uff-converter-tf

    python3.8 -m pip --no-cache-dir install jupyter

    # Install MPI (match the version with the cluster).
    mkdir -p /tmp/mpi
    cd /tmp/mpi
    wget -O openmpi-2.1.0.tar.bz2 https://www.open-mpi.org/software/ompi/v2.1/downloads/openmpi-2.1.0.tar.bz2
    tar -xjf openmpi-2.1.0.tar.bz2
    cd openmpi-2.1.0
    ./configure --prefix=/usr/local --with-cuda
    make -j $(nproc)
    make install
    ldconfig

    # Cleanup
    apt-get -qq clean
    rm -rf /tmp/mpi
    rm -rf /var/lib/apt/lists/*


%test
    python3 -V
    pip -V
    grep -q NAME=\"Ubuntu\" /etc/os-release
        if [ $? -eq 0 ]; then
                echo "Container base is Ubuntu as expected."
        else
                echo "Container base is not Ubuntu."
                exit 1
        fi


%labels
    Author yinuo
    Version v0.0.1
